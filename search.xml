<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unraid盘符的只读问题修复</title>
    <url>/2023/09/28/unraid%E7%9B%98%E7%AC%A6%E5%8F%AA%E8%AF%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>一开始以为是unraid的问题, 就去找unraid相关的帖子看看有没有解决办法</p>
<p>但是并没有, 这让我很头疼, 于是先开了unraid的命令行看一下情况</p>
<p>df -h看起来没啥问题 (图片是后来修好了之后才截的, 不过复现也很简单就不节外生枝了)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260732559.png" alt="image-20230926073216523"></p>
<p>mount查看一下挂载情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260733970.png" alt="image-20230926073332944"></p>
<p>在这里能看到挂载情况是ro (图同上, 把rw看成ro就可以)</p>
<p>我们unmount一下再重新挂载看看</p>
<p>没有unmount命令, 加上unraid这个系统没找到包管理器, 想别的办法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260734374.png" alt="image-20230926073439349"></p>
<p>因为再webui里面有unmount, 就直接用了</p>
<p>之后使用<code>mount /dev/nvme0n1p3 /mnt/disks/ZTA21T0KA230550818-part3</code>手动挂载</p>
<p>报错, 显示windows的缓存还在 (图片引用了别人的, 我忘记截图了)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260737776.png" alt="image-20230926073727753"></p>
<p>另外查看这块盘上的内容可以发现有个132g的hiberfile.sys, 这东西就是windows的休眠文件, 根据已有信息, 判断windows自动修复的时候把快速启动选项给重新开启了, 所以才会生成这种文件</p>
<p>试了几种方法, 我这里启动这块盘上的windows, 关闭快速启动后还是只读, 于是再次开启windows发现hiberfile.sys还在, 于是使用</p>
<p><code>powercfg -h off</code> 命令彻底关闭, 查看磁盘发现hiberfile文件已删除</p>
<p>重新启动, 问题解决</p>
<p>这里我其实也试了<code>sudo ntfs-3g -o remove_hiberfile /dev/nvme0n1p3 /mnt/disks/ZTA21T0KA230550818-part3</code></p>
<p>不过无法挂载, 所以才找了别的方法</p>
]]></content>
      <tags>
        <tag>Unraid</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>出题教程</title>
    <url>/2023/09/28/%E5%87%BA%E9%A2%98%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>web的题目按照docker来构建镜像</p>
<p>一般来说需要两个文件, 但是当只需要拉取别人制作好的镜像的时候其实只需要docker-compose.yml</p>
<p>docker-compose.yml和Dockerfile</p>
<p>下面是两个是简单示例</p>
<h3 id="题目结构"><a href="#题目结构" class="headerlink" title="题目结构"></a>题目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120067.png" alt="image-20230909133516054"></p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web_multi</span></span><br><span class="line">    <span class="comment"># 当build和image同时出现时, 会把image当成这个镜像的名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 1.html /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#nginx版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"><span class="comment">#会把src目录下的文件全部复制过去, 不是复制src文件夹</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"><span class="comment">#把当前目录下的flag.sh复制到根目录下</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"><span class="comment">#apache版本</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这样一道最简单的纯html题目就搭建好了</p>
<p>如果需要加入php, 则需要在Dockerfile里面拉取php的镜像并构建</p>
<blockquote>
<p>比如FROM php:5.6-fpm-alpine</p>
<p>或者是FROM ctfhub&#x2F;base_web_nginx_php_74</p>
<p>或者ctftraining&#x2F;base_image_nginx_mysql_php_73</p>
</blockquote>
<p>还可以加入flag.sh初始化脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$FLAG</span> &gt; /flag <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/flag&#123;test&#125;/$FLAG/&#x27;</span> /var/www/html/flag.php <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<p>这里有个坑, 一定要用\r也就是回车才行, 而回车在linux中是\n, 在windows中式\r\n, linux不认识\r, 故flag.sh会报错不能执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120521.png" alt="image-20230909202502167"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">webapp</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── start.sh</span><br><span class="line">└── src</span><br><span class="line">    └── index.php</span><br></pre></td></tr></table></figure>

<ol>
<li>sed -i 后面一定跟着双引号, 单引号是会被当成字符串</li>
</ol>
<p>我的实现方案是</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nanamo/web_multi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /flag.sh <span class="comment"># 执行flag.sh, 但是执行完就会停止容器, 不清楚为什么</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#flag.sh</span></span><br><span class="line">sed -i <span class="string">&quot;s/flag&#123;test&#125;/<span class="variable">$FLAG</span>/&quot;</span> /var/www/html/F14g.php</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line"></span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line">service apache2 start <span class="comment">#不启动就会卡在下一步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -f /dev/null <span class="comment">#能够让flag.sh执行完之后不会停止容器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93">https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93</a></p>
<p><a href="https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/">https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/</a></p>
</blockquote>
<p>如果遇上要拉取的镜像太大的时候, 可以更换apt源和pip源, 能够提高速度</p>
<p>只需要在添加一个source.list在目录中,, 一般是Dockerfile的同级目录</p>
<p>里面填上需要更换的apt源</p>
<p>在Dockerfile里加上<code>ADD ./sources.list /etc/apt</code></p>
<p>pip更新的话用这个</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
