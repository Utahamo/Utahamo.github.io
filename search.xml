<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test1</title>
    <url>/2023/09/23/test1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2023/09/23/test2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>出题教程</title>
    <url>/2023/09/28/%E5%87%BA%E9%A2%98%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>web的题目按照docker来构建镜像</p>
<p>一般来说需要两个文件, 但是当只需要拉取别人制作好的镜像的时候其实只需要docker-compose.yml</p>
<p>docker-compose.yml和Dockerfile</p>
<p>下面是两个是简单示例</p>
<h3 id="题目结构"><a href="#题目结构" class="headerlink" title="题目结构"></a>题目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120067.png" alt="image-20230909133516054"></p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web_multi</span></span><br><span class="line">    <span class="comment"># 当build和image同时出现时, 会把image当成这个镜像的名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 1.html /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#nginx版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"><span class="comment">#会把src目录下的文件全部复制过去, 不是复制src文件夹</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"><span class="comment">#把当前目录下的flag.sh复制到根目录下</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"><span class="comment">#apache版本</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这样一道最简单的纯html题目就搭建好了</p>
<p>如果需要加入php, 则需要在Dockerfile里面拉取php的镜像并构建</p>
<blockquote>
<p>比如FROM php:5.6-fpm-alpine</p>
<p>或者是FROM ctfhub&#x2F;base_web_nginx_php_74</p>
<p>或者ctftraining&#x2F;base_image_nginx_mysql_php_73</p>
</blockquote>
<p>还可以加入flag.sh初始化脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$FLAG</span> &gt; /flag <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/flag&#123;test&#125;/$FLAG/&#x27;</span> /var/www/html/flag.php <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<p>这里有个坑, 一定要用\r也就是回车才行, 而回车在linux中是\n, 在windows中式\r\n, linux不认识\r, 故flag.sh会报错不能执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120521.png" alt="image-20230909202502167"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">webapp</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── start.sh</span><br><span class="line">└── src</span><br><span class="line">    └── index.php</span><br></pre></td></tr></table></figure>

<ol>
<li>sed -i 后面一定跟着双引号, 单引号是会被当成字符串</li>
</ol>
<p>我的实现方案是</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nanamo/web_multi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /flag.sh <span class="comment"># 执行flag.sh, 但是执行完就会停止容器, 不清楚为什么</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#flag.sh</span></span><br><span class="line">sed -i <span class="string">&quot;s/flag&#123;test&#125;/<span class="variable">$FLAG</span>/&quot;</span> /var/www/html/F14g.php</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line"></span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line">service apache2 start <span class="comment">#不启动就会卡在下一步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -f /dev/null <span class="comment">#能够让flag.sh执行完之后不会停止容器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93">https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93</a></p>
<p><a href="https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/">https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/</a></p>
</blockquote>
<p>如果遇上要拉取的镜像太大的时候, 可以更换apt源和pip源, 能够提高速度</p>
<p>只需要在添加一个source.list在目录中,, 一般是Dockerfile的同级目录</p>
<p>里面填上需要更换的apt源</p>
<p>在Dockerfile里加上<code>ADD ./sources.list /etc/apt</code></p>
<p>pip更新的话用这个</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF, docker</tag>
      </tags>
  </entry>
</search>
